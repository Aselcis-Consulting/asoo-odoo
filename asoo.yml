deploy_info:
  private_submodules:
    - git@github.com:Aselcis-Consulting/enterprise.git

server_setup:
  update:
    sudo: true
    commands:
      - 'apt update'
  git:
    sudo: true
    commands:
      - 'apt -y install git'
  curl:
    sudo: true
    commands:
      - 'apt -y install curl'
  swift:
    sudo: true
    commands:
      - 'apt -y install python3-swiftclient'
  docker:
    sudo: true
    commands:
      - 'curl -fsSL get.docker.com -o get-docker.sh'
      - 'sh get-docker.sh'
      - 'rm get-docker.sh'
  docker-compose:
    sudo: true
    commands:
      - 'apt -y install python-pip'
      - 'pip install docker-compose'
  workspace-chmod:
    sudo: true
    commands:
      - 'chmod 757 /opt/'

environment_info:
  application: 'odoo'
  application_version: '12.0'
  application_service: 'web'
  application_container_user: '0'
  git_submodule_path: 'addons'
  addons_dir: '/mnt'
  nginx_service: 'web'
  nginx_virtual_port: '8069'
  odoo_config: 'config/odoo.conf'
  workspace: '/opt/${object.server_id.technical_name}-${object.name}-${object.id}'
  process_files:
    - 'docker-compose.yml'
    - 'config/odoo.conf'
    - 'config/odoo-test.conf'

environment_setup:
  entrypoint_chmod:
    commands:
      - 'chmod 655 entrypoint.sh'

environment_test_info:
  test_mute: true
  test_error_regex: '^(?:\d{4}-\d\d-\d\d \d\d:\d\d:\d\d,\d{3} \d+ (?:ERROR|CRITICAL) )|(?:Traceback \(most recent call last\):)$'
  test_warn_regex: '^\d{4}-\d\d-\d\d \d\d:\d\d:\d\d,\d{3} \d+ WARNING '
  script_test:
    service: 'web'
    commands:
      - 'odoo --test-enable -c /etc/odoo/odoo-test.conf --log-level=test --stop-after-init -i base'
  script_after:
    sudo: true
    commands:
      - 'docker-compose stop web'
      - 'docker-compose exec -T db dropdb -U odoo odoo-test'
      - 'docker-compose start web'

backup:
  format: 'tar.bz2'
  create:
    ensure_start: true
    script:
      dump:
        description: 'Dumping PostgreSQL'
        sudo: true
        commands:
          - 'docker-compose exec -T db pg_dumpall -U odoo > ${ctx.get("workspace")}/dump.sql'
      filestore:
        description: 'Copying Odoo filestore'
        sudo: true
        commands:
          - 'docker cp ${object.docker_container_id("web")}:/var/lib/odoo/filestore ${ctx.get("workspace")}/filestore'
      tar:
        description: 'Compressing backup'
        sudo: True
        commands:
          - 'cd ${ctx.get("backups_dir")} && tar -cvjf ${ctx.get("filename")} ${ctx.get("backup_name")}/. &>/dev/null'
      rm_workspace:
        description: 'Removing workspace'
        sudo: true
        commands:
          - 'rm -dfr ${ctx.get("workspace")}'
      upload:
        description: 'Uploading backup'
        sudo: true
        commands:
          - 'swift --os-auth-token ${ctx.get("container").openstack_token} --os-storage-url ${ctx.get("container").openstack_url} upload ${ctx.get("container").name} ${ctx.get("backups_dir")}/${ctx.get("filename")} --object-name ${ctx.get("filename")}'
      rm_backup:
        description: 'Removing backup file'
        sudo: true
        commands:
          - 'rm -dfr ${ctx.get("backups_dir")}/${ctx.get("filename")}'
  restore:
    ensure_start: true
    after_restart: true
    remove_volumes: true
    script:
      download:
        description: 'Downloading backup file'
        sudo: true
        commands:
          - 'rm -fr ${ctx.get("workspace")}/${ctx.get("object").name}'
          - 'cd ${ctx.get("workspace")} && swift --os-auth-token ${ctx.get("container").openstack_token} --os-storage-url ${ctx.get("container").openstack_url} download ${ctx.get("container").name} ${ctx.get("object").name} -o ${ctx.get("object").name}'
      untar:
        description: 'Decompressing backup'
        sudo: true
        commands:
          - 'tar -xvjf ${ctx.get("workspace")}/${ctx.get("object").name} -C ${ctx.get("workspace")} &>/dev/null'
          - 'rm -fr ${ctx.get("workspace")}/${ctx.get("object").name}'
      dump:
        description: 'Restoring PostgreSQL dump'
        sudo: true
        commands:
          - 'docker cp ${ctx.get("backup_content")}/dump.sql ${object.docker_container_id("db")}:/'
          - 'docker-compose exec -T db psql -U odoo -d postgres -f /dump.sql'
          - 'docker-compose exec -T -u 0 db rm /dump.sql'
      filestore:
        description: 'Restoring Odoo filestore'
        sudo: true
        commands:
          - 'docker cp ${ctx.get("backup_content")}/filestore/. ${object.docker_container_id("web")}:/var/lib/odoo/filestore'
          - 'docker-compose exec -T -u 0 web chown -R odoo:odoo /var/lib/odoo/filestore'
      clean:
        description: 'Cleaning leftovers from the backup'
        sudo: true
        commands:
          - 'rm -dfr ${ctx.get("workspace")}'